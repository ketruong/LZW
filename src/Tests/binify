#!/usr/bin/perl
#
#   binify binSize* < FILE
#
# Write to stdout the largest number of unfreed allocations of specified sizes
# (default: 1, 4, 16, 64, 256, 1024, 4096).
#
# Example:
#     % binify 10 20 40 < FILE
#   uses bins 0 < s <= 10, 10 < s <= 20, 20 < s <= 40, 40 < s.

if (@ARGV > 0) {                                # Set bin boundaries
   @bins = (0, @ARGV);
   @ARGV = ();
} else {
   @bins = (0, 1, 4, 16, 64, 256, 1024, 4096);
}

# Find bin number of ALLOC
sub bin {# ($alloc)
   my ($alloc) = @_;
   for (my $i = 0; $i <= $#bins; $i++) {
      return $i-1 if ($alloc <= $bins[$i]);
   }
   return $#bins;
}

for ($i = 0; $i <= @bins; $i++) {
  $maxHist[$i] = $hist[$i] = 0;
}

while (<>) {
   if (m{^malloc\s*\((\d+)\)}) {
      $new = $1;
      $new = &bin($new);
      $hist[$new]++;
      $maxHist[$new] = $hist[$new]
	 if $maxHist[$new] < $hist[$new];

   } elsif (m{^realloc\s*\((\d+),(\d+)\)}) {
      ($old,$new) = ($1,$2);
      $old = &bin($old);
      $hist[$old]--;
      $maxHist[$old] = $hist[$old]
	 if $maxHist[$old] < $hist[$old];
      $new = &bin($new);
      $hist[$new]++;
      $maxHist[$new] = $hist[$new]
	 if $maxHist[$new] < $hist[$new];

   } elsif (m{^free\s*\((\d+)\)}) {
      $old = $1;
      $old = &bin($old);
      $hist[$old]--;
      $maxHist[$old] = $hist[$old]
	 if $maxHist[$old] < $hist[$old];
   }
}

for ($i = 0; $i < $#bins; $i++) {
   print "$bins[$i]:$maxHist[$i], ";
}
print "$bins[$i]:$maxHist[$i]\n";
